{
    "docs": [
        {
            "location": "/", 
            "text": "SAINTCON HHV Labs 2016\n\n\n\n\nHackRF RC Car\n\n\nADS-B\n\n\nproxmark\n\n\n\n\nAdd some links here...", 
            "title": "Home"
        }, 
        {
            "location": "/#saintcon-hhv-labs-2016", 
            "text": "HackRF RC Car  ADS-B  proxmark   Add some links here...", 
            "title": "SAINTCON HHV Labs 2016"
        }, 
        {
            "location": "/walkthroughs/hackrf-rc-car/", 
            "text": "Controlling an RC Car with HackRF\n\n\nGoals\n\n\nRequired Software\n\n\nWalkthrough\n\n\nWhat's the Frequency, Kenneth?\n\n\nThe first thing we need to know is what frequency your chosen rf car uses.\nSome devices will have a label to get you close.  Another option would be to\n\nlook up the FCC ID\n to find\nthe band it runs in.\n\n\nOnce you have an idea of where it runs, we need the exact frequency.  I used\n\ngqrx\n, since is relatively simple and included in debian-based\ndistributions.\n\n\nMake sure the HackRF is plugged in to a USB port with lights on, then run\n\ngqrx -e\n (the \n-e\n means you want to edit settings).\n\n\n\n\n\n\nIn the Device field, choose the HackRF\n\n\nSet Input Rate to an appropriate vaule (higher will cover more of the band)\n\n\nClick OK\n\n\n\n\nNow, tune the receiver to somewhere you will be able to see the frequency you\nare interested in and press the button that looks like a 'play' button.  To\ntune, scroll the mouse wheel with the mouse cursor over the digit you want to\nchange on the frequency display.  The red line is where we are tuned to (for\npurposes of demodulation), the light dotted line in the center of the waveform\ndisplay is the center frequency that the hackrf is tuned to.  On the right pane\nin the 'Receiver Options' pane, you will see an offset from the center\nfrequency.\n\n\n\n\nThis is an example of the lack of radio stations available in Cache Valley.  The HackRF is tuned to 94.000 MHz, the receiver is tuned 3.5 MHz above that and listening to 97.5 MHz demodulated as WFM(mono).  \n\n\nTo find your frequency, press and hold one of the controls on the remote and see if you see it appear in the waterfall display.  If you click in the waterfall display, it will tune to that frequency.  To get a better view of your current frequency, go to the FFT Settings tab on the right panel and increase the zoom.\n\n\nHow does this thing work?\n\n\nNow that you know the frequency, you can get a capture of the output from your remote.  Go to Tools -\n I/Q Recorder and record a sample.  From here, you could just replay the recorded sample and control your car.\n\n\nNow, let's get a closer look.  Let's open the file in \ninspectrum\n.  Run \ninspectrum \npath/to/file.raw\n.  The vertical axis is frequency relative to the center frequency, the horizontal axis is time.  Scroll to the right until you find your signal.  Notice that the signal is not continuous.  Zoom in so you can comfortably see where the gaps are.  Now, check the 'enable cursors' box and highlight a gap.  Now, increase the number of symbols and adjust the end to get a more accurate measurement.  Here is how mine looked:\n\n\n\n\nIn this example, the symbol rate is 1875 symbols/second, each symbol taking 533 microseconds.\n\n\nIf you are really ambitious, from this point you can now reverse-engineer the protocol (ie. see what the pattern is for each of the controls).  It would be a really good learning experience for you.  To save time, however, we will look at the end result from someone who has done it for us.\n\n\nRun \nrf-car -f \ndetermined_frequency_in_hz\n.  The default frequency is 40684300 which is around 40.7 MHz.\n\n\nChallenge\n\n\nAdditional Information", 
            "title": "HackRF RC Car"
        }, 
        {
            "location": "/walkthroughs/hackrf-rc-car/#controlling-an-rc-car-with-hackrf", 
            "text": "", 
            "title": "Controlling an RC Car with HackRF"
        }, 
        {
            "location": "/walkthroughs/hackrf-rc-car/#goals", 
            "text": "", 
            "title": "Goals"
        }, 
        {
            "location": "/walkthroughs/hackrf-rc-car/#required-software", 
            "text": "", 
            "title": "Required Software"
        }, 
        {
            "location": "/walkthroughs/hackrf-rc-car/#walkthrough", 
            "text": "", 
            "title": "Walkthrough"
        }, 
        {
            "location": "/walkthroughs/hackrf-rc-car/#whats-the-frequency-kenneth", 
            "text": "The first thing we need to know is what frequency your chosen rf car uses.\nSome devices will have a label to get you close.  Another option would be to look up the FCC ID  to find\nthe band it runs in.  Once you have an idea of where it runs, we need the exact frequency.  I used gqrx , since is relatively simple and included in debian-based\ndistributions.  Make sure the HackRF is plugged in to a USB port with lights on, then run gqrx -e  (the  -e  means you want to edit settings).    In the Device field, choose the HackRF  Set Input Rate to an appropriate vaule (higher will cover more of the band)  Click OK   Now, tune the receiver to somewhere you will be able to see the frequency you\nare interested in and press the button that looks like a 'play' button.  To\ntune, scroll the mouse wheel with the mouse cursor over the digit you want to\nchange on the frequency display.  The red line is where we are tuned to (for\npurposes of demodulation), the light dotted line in the center of the waveform\ndisplay is the center frequency that the hackrf is tuned to.  On the right pane\nin the 'Receiver Options' pane, you will see an offset from the center\nfrequency.   This is an example of the lack of radio stations available in Cache Valley.  The HackRF is tuned to 94.000 MHz, the receiver is tuned 3.5 MHz above that and listening to 97.5 MHz demodulated as WFM(mono).    To find your frequency, press and hold one of the controls on the remote and see if you see it appear in the waterfall display.  If you click in the waterfall display, it will tune to that frequency.  To get a better view of your current frequency, go to the FFT Settings tab on the right panel and increase the zoom.", 
            "title": "What's the Frequency, Kenneth?"
        }, 
        {
            "location": "/walkthroughs/hackrf-rc-car/#how-does-this-thing-work", 
            "text": "Now that you know the frequency, you can get a capture of the output from your remote.  Go to Tools -  I/Q Recorder and record a sample.  From here, you could just replay the recorded sample and control your car.  Now, let's get a closer look.  Let's open the file in  inspectrum .  Run  inspectrum  path/to/file.raw .  The vertical axis is frequency relative to the center frequency, the horizontal axis is time.  Scroll to the right until you find your signal.  Notice that the signal is not continuous.  Zoom in so you can comfortably see where the gaps are.  Now, check the 'enable cursors' box and highlight a gap.  Now, increase the number of symbols and adjust the end to get a more accurate measurement.  Here is how mine looked:   In this example, the symbol rate is 1875 symbols/second, each symbol taking 533 microseconds.  If you are really ambitious, from this point you can now reverse-engineer the protocol (ie. see what the pattern is for each of the controls).  It would be a really good learning experience for you.  To save time, however, we will look at the end result from someone who has done it for us.  Run  rf-car -f  determined_frequency_in_hz .  The default frequency is 40684300 which is around 40.7 MHz.", 
            "title": "How does this thing work?"
        }, 
        {
            "location": "/walkthroughs/hackrf-rc-car/#challenge", 
            "text": "", 
            "title": "Challenge"
        }, 
        {
            "location": "/walkthroughs/hackrf-rc-car/#additional-information", 
            "text": "", 
            "title": "Additional Information"
        }, 
        {
            "location": "/software-2016/", 
            "text": "Software used\n\n\nI was using Debian sid, other versions may suffice.\n\n\n\n\nbuild-essential (debian package)\n\n\ngqrx\n (debian package)\n\n\ninspectrum\n (build from git, debian was too old)\n\n\ncmake (debian package)\n\n\nqt5-default (debian package)\n\n\npkg-config (debian package)\n\n\nliquid-dsp\n (build from git, not in debian)\n\n\n\n\n\n\nrf-car\n (build from git, not in debian)\n\n\nlibsdl2-image-dev (debian package)\n\n\nlibhackrf-dev (debian packages)", 
            "title": "Software"
        }, 
        {
            "location": "/software-2016/#software-used", 
            "text": "I was using Debian sid, other versions may suffice.   build-essential (debian package)  gqrx  (debian package)  inspectrum  (build from git, debian was too old)  cmake (debian package)  qt5-default (debian package)  pkg-config (debian package)  liquid-dsp  (build from git, not in debian)    rf-car  (build from git, not in debian)  libsdl2-image-dev (debian package)  libhackrf-dev (debian packages)", 
            "title": "Software used"
        }
    ]
}